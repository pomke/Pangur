"""Encrypts passwords and validates encrypted passwords."""

from hmac import new as HMAC
from hashlib import sha224 as HashFunc
from os import urandom
from base64 import b64encode

def _makeSalt():
    # use /dev/urandom to generate cryptographically secure junk.
    return b64encode(urandom(13))

def _makeHash(clearText, salt):
    # use HMAC with an SHA hash function to securely hash the clear text.
    # In py2.6 HMAC input must be strings so utf-8 encode them
    salt = salt.encode('utf-8')
    clearText = clearText.encode('utf-8')
    return b64encode(HMAC(salt, clearText, HashFunc).digest())

def hashPassword(clearText):
    """Create a salted hash of the given clear-text password for database storage.
    
    A new salt is generated securely each time hashPassword is called.
    The result is an opaque string containing ascii characters only."""
    salt = _makeSalt()
    return "%s$%s" % (salt, _makeHash(clearText, salt))

def checkPassword(clearText, hashedText):
    """Check if the given clear-text password matches a hash generated by hashPassword.
    
    Returns True if the passwords match, False otherwise."""
    if hashedText.count('$') == 1:
        salt, hash = hashedText.split('$')
        return _makeHash(clearText, salt) == hash
    return False
