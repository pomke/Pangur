#!/usr/bin/python
import sys

from werkzeug import run_simple, SharedDataMiddleware

from pangur.globals import Config
from pangur.service import init, application
from pangur import database




def help(command=None):
    """help - display this help"""
    if command in commands and command != 'help':
        print "usage: pangur %s" % commands[command].__doc__
    else:
        print "usage:"
        for cmd in sorted(commands.values(), key=lambda c: c.__doc__):
            print "    pangur %s" % cmd.__doc__

def setupdb(conf, path):
    """setupdb <package> - create database tables"""
    if '.' in path:
        pkg = path.split('.')[0]
    else:
        pkg = path
    init(conf, pkg)
    database.DB(conf).setupDB()

def run(conf, pkg):
    """run <package> - run development server"""
    resources = {}
    for k,v in conf.dev.static_resources.items():
        resources[k] = v.format(**vars(conf.paths))
    app = SharedDataMiddleware(application, resources)
    run_simple(conf.dev.interface, conf.dev.port, app)


commands = {'help' : help,
            'setupdb' : setupdb,
            'run' : run}

def processCommand(command):
    if command == 'help':
        if len(sys.argv) > 2:
            command = sys.argv[2]
        help(command)
        sys.exit()
    try:
        if len(sys.argv) == 2:
            help(sys.argv[1])
            sys.exit()
        path = sys.argv[2]
        __import__(path)
        mod = sys.modules[path]
        conf = None
        for k,o in mod.__dict__.items():
            if type(o) is Config: 
                conf = o
        if conf:
            commands[command](conf, path)
        else:
            raise ImportError()
    except ImportError, e:
        print e
        print "A valid Config object could not be found in '%s'." % (path,)
        sys.exit(1)


sys.path.append('.')
if len(sys.argv) == 1:
    help()
elif sys.argv[1] in commands:
    processCommand(sys.argv[1])
else:
    print "unknown command '%s', try 'help' for help." % sys.argv[1]

